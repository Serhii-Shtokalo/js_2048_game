{"version":3,"sources":["scripts/main.js"],"names":["score","document","querySelector","initializeGameBtn","gameOver","youWin","startMessage","rows","Array","from","querySelectorAll","board","fill","map","x","KEY_DIRECTIONS","UP","DOWN","LEFT","RIGHT","findEmptyCell","boardSize","row","column","Math","floor","random","addNumber","render","rowIdx","cell","columnIdx","elem","children","textContent","classList","setScore","startGame","cellIdx","cellArr","add","remove","contains","reduce","prev","sum","normalizeArr","move","initialArray","useReverse","normalizedArray","reverse","makeMove","newArr","moveMaded","rowInd","cellsWithData","filter","splice","length","addEventListener","pressEvent","anyMovesLeft","some","moves","Object","values","includes","key","receivedArray","shift","rowArr"],"mappings":"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","file":"main.31965c25.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\nconst score = document.querySelector('.game-score');\nconst initializeGameBtn = document.querySelector('.button.start');\nconst gameOver = document.querySelector('.message-lose');\nconst youWin = document.querySelector('.message-win');\nconst startMessage = document.querySelector('.message-start');\nconst rows = Array.from(document.querySelectorAll('.field-row'));\nconst board = Array(4).fill(0).map(x => Array(4).fill(0));\n\nconst KEY_DIRECTIONS = {\n  UP: 'ArrowUp',\n  DOWN: 'ArrowDown',\n  LEFT: 'ArrowLeft',\n  RIGHT: 'ArrowRight',\n};\n\nfunction findEmptyCell() {\n  const boardSize = {\n    row: 0,\n    column: 0,\n  };\n\n  do {\n    boardSize.row = Math.floor(Math.random() * 4);\n    boardSize.column = Math.floor(Math.random() * 4);\n  } while (board[boardSize.row][boardSize.column] !== 0);\n\n  return boardSize;\n}\n\nfunction addNumber() {\n  const { row, column } = findEmptyCell();\n\n  board[row][column] = Math.random() < 0.9 ? 2 : 4;\n}\n\nfunction render() {\n  board.map((row, rowIdx) => {\n    row.map((cell, columnIdx) => {\n      const elem = rows[rowIdx].children[columnIdx];\n\n      if (cell === 0) {\n        elem.textContent = '';\n        elem.classList = 'field-cell';\n      } else {\n        elem.textContent = cell;\n        elem.classList = `field-cell field-cell--${cell}`;\n      }\n    });\n  });\n\n  score.textContent = setScore();\n}\n\nfunction startGame() {\n  board.map(row =>\n    row.map((cell, cellIdx, cellArr) => (\n      cellArr[cellIdx] = 0)));\n\n  render();\n  startMessage.classList.add('hidden');\n  initializeGameBtn.classList.remove('start');\n  initializeGameBtn.classList.add('restart');\n  initializeGameBtn.textContent = 'Restart';\n  score.textContent = '0';\n\n  if (!youWin.classList.contains('hidden')) {\n    youWin.classList.add('hidden');\n  }\n\n  if (!gameOver.classList.contains('hidden')) {\n    gameOver.classList.add('hidden');\n  }\n\n  addNumber();\n  addNumber();\n  render();\n}\n\nfunction setScore() {\n  return board.reduce((prev, row) => (\n    prev + row.reduce((sum, cell) => sum + cell)\n  ), 0);\n}\n\nfunction normalizeArr(move, initialArray, useReverse = false) {\n  const normalizedArray = [[], [], [], []];\n\n  if (move === KEY_DIRECTIONS.UP || move === KEY_DIRECTIONS.DOWN) {\n    for (let row = 0; row < 4; row++) {\n      for (let column = 0; column < 4; column++) {\n        normalizedArray[column][row] = initialArray[row][column];\n      }\n    }\n  }\n\n  if (move === KEY_DIRECTIONS.LEFT || move === KEY_DIRECTIONS.RIGHT) {\n    for (let row = 0; row < 4; row++) {\n      for (let column = 0; column < 4; column++) {\n        normalizedArray[row][column] = initialArray[row][column];\n      }\n    }\n  }\n\n  if (useReverse && (move === KEY_DIRECTIONS.RIGHT\n    || move === KEY_DIRECTIONS.DOWN)) {\n    normalizedArray.map(row => row.reverse());\n  }\n\n  return normalizedArray;\n}\n\nfunction makeMove(move) {\n  const newArr = normalizeArr(move, board, true);\n  let moveMaded = false;\n\n  newArr.map((row, rowInd) => {\n    const cellsWithData = row.filter(cell => cell !== 0);\n\n    cellsWithData.map((cell, cellIdx, cellArr) => {\n      if (cell === cellArr[cellIdx + 1]) {\n        cellArr[cellIdx] *= 2;\n        cellArr.splice(cellIdx + 1, 1);\n        moveMaded = true;\n      }\n    });\n    moveMaded = moveMaded || cellsWithData.length !== 4;\n\n    row.map((cell, cellIdx, cellArr) => {\n      cellArr[cellIdx] = cellsWithData[cellIdx] || 0;\n    });\n  });\n\n  if (!moveMaded) {\n    return false;\n  }\n\n  if (move === KEY_DIRECTIONS.RIGHT || move === KEY_DIRECTIONS.DOWN) {\n    newArr.map(row => row.reverse());\n  }\n\n  return normalizeArr(move, newArr);\n}\n\ninitializeGameBtn.addEventListener('click', startGame);\n\ndocument.addEventListener('keydown', (pressEvent) => {\n  let anyMovesLeft = board.some(row => row.some(cell => cell === 0));\n  const moves = Object.values(KEY_DIRECTIONS);\n\n  const move = moves.includes(pressEvent.key) ? pressEvent.key : '';\n  let receivedArray = [];\n\n  if (move) {\n    receivedArray = makeMove(move);\n\n    if (!receivedArray || !anyMovesLeft) {\n      anyMovesLeft = moves.some(shift => {\n        if (move === shift) {\n          return false;\n        }\n\n        return !!makeMove(shift);\n      });\n    }\n\n    if (!anyMovesLeft) {\n      gameOver.classList.remove('hidden');\n    }\n\n    if (receivedArray) {\n      board.map((row, rowIdx, rowArr) => {\n        row.map((cell, columnIdx) => {\n          rowArr[rowIdx][columnIdx] = receivedArray[rowIdx][columnIdx];\n        });\n      });\n\n      if (board.some(row => row.some(cell => cell === 2048))) {\n        youWin.classList.remove('hidden');\n      }\n\n      addNumber();\n      render();\n    }\n  }\n});\n"]}